diff a/src/panfrost/lib/pan_layout.c b/src/panfrost/lib/pan_layout.c	(rejected hunks)
@@ -32,6 +32,14 @@
  * enabling the YUV-like transform is typically a win where possible. */
 
 uint64_t pan_best_modifiers[PAN_MODIFIER_COUNT] = {
+        DRM_FORMAT_MOD_ARM_AFBC(
+                AFBC_FORMAT_MOD_BLOCK_SIZE_16x16 |
+                AFBC_FORMAT_MOD_TILED |
+                AFBC_FORMAT_MOD_SC |
+                AFBC_FORMAT_MOD_SPARSE |
+                AFBC_FORMAT_MOD_YTR |
+                AFBC_FORMAT_MOD_NATIVE_SWIZZLE),
+
         DRM_FORMAT_MOD_ARM_AFBC(
                 AFBC_FORMAT_MOD_BLOCK_SIZE_16x16 |
                 AFBC_FORMAT_MOD_TILED |
@@ -201,18 +209,17 @@ pan_afbc_body_align(uint64_t modifier)
 #define CHECKSUM_TILE_HEIGHT 16
 #define CHECKSUM_BYTES_PER_TILE 8
 
-unsigned
-panfrost_compute_checksum_size(
-        struct pan_image_slice_layout *slice,
-        unsigned width,
-        unsigned height)
+struct pan_image_slice_crc
+panfrost_compute_checksum_size(unsigned width, unsigned height)
 {
         unsigned tile_count_x = DIV_ROUND_UP(width, CHECKSUM_TILE_WIDTH);
         unsigned tile_count_y = DIV_ROUND_UP(height, CHECKSUM_TILE_HEIGHT);
 
-        slice->crc.stride = tile_count_x * CHECKSUM_BYTES_PER_TILE;
-
-        return slice->crc.stride * tile_count_y;
+        struct pan_image_slice_crc ret = {
+                .stride = tile_count_x * CHECKSUM_BYTES_PER_TILE,
+                .size = ret.stride * tile_count_y,
+        };
+        return ret;
 }
 
 unsigned
@@ -236,8 +243,11 @@ panfrost_get_legacy_stride(const struct pan_image_layout *layout,
                 panfrost_block_size(layout->modifier, layout->format);
 
         if (drm_is_afbc(layout->modifier)) {
+                unsigned align_w = block_size.width *
+                        pan_afbc_tile_size(layout->modifier);
+
                 unsigned width = u_minify(layout->width, level);
-                width = ALIGN_POT(width, block_size.width);
+                width = ALIGN_POT(width, align_w);
 
                 return width * util_format_get_blocksize(layout->format);
         } else {
@@ -392,9 +402,7 @@ pan_image_layout_init(struct pan_image_layout *layout,
 
                 /* Add a checksum region if necessary */
                 if (layout->crc) {
-                        slice->crc.size =
-                                panfrost_compute_checksum_size(slice, width, height);
-
+                        slice->crc = panfrost_compute_checksum_size(width, height);
                         slice->crc.offset = offset;
                         offset += slice->crc.size;
                         slice->size += slice->crc.size;
